<?xml version="1.0" encoding="utf-8"?>
<topic id="63392b30-cd57-428e-bd77-3dee6259d856" revisionNumber="1">
	<developerHowToDocument
	  xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
	  xmlns:xlink="http://www.w3.org/1999/xlink">

    <summary>
      <para>This tutorial will help you setup a simple scene in duality with a agent that will try to move to where you click with your mouse</para>
    </summary>

		<introduction>
			<para>
				This tutorial assumes you know how duality tilemaps work. If you do not know this then follow this tutorial first:
				<externalLink>
					<linkText>Tilemaps tutorial</linkText>
					<linkUri>https://github.com/AdamsLair/duality/wiki/Tilemaps</linkUri>
				</externalLink>
			</para>
		</introduction>
		<procedure>
			<title>Steps</title>
			<steps class="ordered">
				<step>
					<content>
						<para>First create a tilemap. To make the pathfinding more interesting you could add some collisions to some of the tiles</para>
					</content>
				</step>
				<step>
					<content>
						<para>
							Add a TilemapNodeGridGenerator and a AStarGridPathfinderComponent to the same gameobject as the tilemap. The TilemapNodeGridGenerator will generate a nodegrid based upon the collisions in your tilemap.
							The AStarPathfinderComponent will use this nodegrid to do its pathfinding.
							Note that if you want to use agents with different sizes then you have to fill in the MaxCalculatedClearance in the TilemapNodeGridGenerator
						</para>
					</content>
				</step>
				<step>
					<content>
						<para>
							Now we have the basic scene setup we can move on to some coding.
							First thing you have to do when you open your project in visual studio is to add references to Pathfindax.
							The easiest way is to do this with nuget. Just type in Duality.Plugins.Pathfindax.Tilemaps.core in the nuget package manager and instal this. 
							Alternatively you could do this manually by using addreference and browse to the dll's but I don't recommend that as this is a slower way.
						</para>
					</content>
				</step>
				<step>
					<content>
						<para>
							In your component add the following code now: 
							<externalLink>
								<linkText>PathFollowerComponent</linkText>
								<linkUri>https://github.com/Barsonax/Pathfindax/blob/master/Source/Code/Duality.Plugins.Pathfindax.Examples/Components/PathFollowerComponent.cs</linkUri>
							</externalLink>
							This will request a path when you click with the mouse button and when that path is solved it will start following it. 
							The TimeBetweenMovements property can be used to slow down the movement so you can better see where it moves. 
							The AgentSize property can be used to calculate a path for a agent that is bigger than 1 node. So a AgentSize of 3 would mean the agent occupies 3 nodes and wont fit in a gap of 1 node. 
							Finally we have a CollisionCategory which will determine what our agent would collide with. Note that this implementation supports both grid and nongrid maps.

							Now add your component to a new gameobject:
						</para>
					</content>
				</step>
				<step>
					<content>
						<para>Also since its nice to actually see something and we need a position add a spriterenderer and a transform to this gameobject. 
						We still do not have a camera in our scene so add this too and position it so you can see the tilemap. The component we just made also needs a reference to a camera so add this too.</para>
					</content>
				</step>
				<step>
					<content>
						<para>
							Thats it now run the game and when you click somewhere the agent will start to move to that position.

							A similar setup can also be found in the example scene from the source here:
							<externalLink>
								<linkText>PathFollowerExample</linkText>
								<linkUri>https://github.com/Barsonax/Pathfindax/tree/develop/Data/PathFollowerExample</linkUri>
							</externalLink>
							
						</para>
					</content>
				</step>
			</steps>
			<!-- <conclusion>Optional conclusion</conclusion> -->
		</procedure>

		<!-- <codeExample>Optional code example</codeExample> -->

		<!-- <buildInstructions>Optional instructions for building a
         code example.</buildInstructions> -->

		<!-- <robustProgramming>Optional discussion of error handling and other
         issues related to writing solid code.</robustProgramming> -->

		<!-- <security>Optional discussion of security issues.</security> -->

		<relatedTopics>
			<!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID">Link text</link>
      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>
      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on GitHub</linkText>
          <linkAlternateText>Go to GitHub</linkAlternateText>
          <linkUri>https://GitHub.com/EWSoftware/SHFB</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
		</relatedTopics>
	</developerHowToDocument>
</topic>
