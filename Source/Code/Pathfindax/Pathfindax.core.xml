<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pathfindax</name>
    </assembly>
    <members>
        <member name="T:Pathfindax.Algorithms.AStarAlgorithm">
            <summary>
            Class that implements the A* algorithm to find paths
            </summary>
        </member>
        <member name="M:Pathfindax.Algorithms.AStarAlgorithm.FindPath(Pathfindax.Grid.INodeGrid{Pathfindax.Nodes.IAStarGridNode},Pathfindax.Primitives.PositionF,Pathfindax.Primitives.PositionF)">
            <inheritdoc />
        </member>
        <member name="T:Pathfindax.Algorithms.IPathFindAlgorithm`1">
            <summary>
            Interface for classes that implement algorithms to find a path.
            </summary>
            <typeparam name="TNodeNetwork"></typeparam>
        </member>
        <member name="M:Pathfindax.Algorithms.IPathFindAlgorithm`1.FindPath(`0,Pathfindax.Primitives.PositionF,Pathfindax.Primitives.PositionF)">
            <summary>
            Finds a path from <paramref name="pathStart"></paramref> to <paramref name="pathEnd"></paramref> using the <paramref name="nodeNetwork"></paramref> and returns this as a list of <see cref="T:Pathfindax.Nodes.IGridNodeBase"/>.
            </summary>
            <param name="nodeNetwork"></param>
            <param name="pathStart"></param>
            <param name="pathEnd"></param>
            <returns></returns>
        </member>
        <member name="T:Pathfindax.Collections.Array2D`1">
            <summary>
            A array class that provides both single dimensional and 2-dimensional access to a array.
            </summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Length">
            <summary>
            The length of the internal array
            </summary>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Width">
            <summary>
            The width of the array in items
            </summary>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Height">
            <summary>
            The height of the array in items
            </summary>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Provides access to the internal array with a 2-dimensional indexer
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="P:Pathfindax.Collections.Array2D`1.Item(System.Int32)">
            <summary>
            Provides access to the internal array with the standard indexer
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Pathfindax.Collections.Array2D`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:Pathfindax.Collections.Array2D`1"/>
            </summary>
            <param name="width">The width of the array in items</param>
            <param name="height">The height of the array in items</param>
        </member>
        <member name="M:Pathfindax.Collections.Array2D`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Pathfindax.Grid.AStarGrid">
            <summary>
            Contains data specific for the A* algorithm.
            Do not share this between threads.
            </summary>
        </member>
        <member name="F:Pathfindax.Grid.GenerateNodeGridNeighbours.None">
            <summary>
            Generate no neighbours.
            </summary>
        </member>
        <member name="F:Pathfindax.Grid.GenerateNodeGridNeighbours.NoDiagonal">
            <summary>
            Generate neighbours except diagonal neighbours
            </summary>
        </member>
        <member name="F:Pathfindax.Grid.GenerateNodeGridNeighbours.All">
            <summary>
            Generate all neighbours
            </summary>
        </member>
        <member name="T:Pathfindax.Grid.SourceNodeGrid">
            <summary>
            Class that holds nodegrid data which wont change and is safe to share between threads
            </summary>
        </member>
        <member name="M:Pathfindax.Grid.SourceNodeGrid.GeneratePreFilledArray(System.Int32,System.Int32,System.Single,Pathfindax.Grid.GenerateNodeGridNeighbours)">
            <summary>
            Returns a preconfigured <see cref="T:Pathfindax.Collections.Array2D`1"/> which can be used to make a <see cref="T:Pathfindax.Grid.SourceNodeGrid"/>
            </summary>
            <param name="width"></param>
            <param name="height"></param>
            <param name="nodeSize"></param>
            <param name="generateNodeGridNeighbours"></param>
            <returns></returns>
        </member>
        <member name="F:Pathfindax.PathfindEngine.CompletedPath.Path">
            <summary>
            The path.
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.CompletedPath.Succes">
            <summary>
            Was the pathfinder able to succesfully find a path?
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.CompletedPath.Callback">
            <summary>
            The callback that will be called after the pathfinder finds a path or cannot find one.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IMultithreadedPathfinder.ProcessCompletedPaths">
            <summary>
            This will process any completedpaths.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IMultithreadedPathfinder.Start">
            <summary>
            Starts the pathfinder.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IMultithreadedPathfinder.Stop">
            <summary>
            Stops the pathfinder.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.IPathfinder.RequestPath(Pathfindax.PathfindEngine.PathRequest)">
            <summary>
            Requests a path.
            </summary>
            <param name="pathRequest"></param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.MultithreadedPathfinder`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequestProcesser`1.#ctor(System.Collections.Generic.IList{`0},Pathfindax.Algorithms.IPathFindAlgorithm{`0},System.Collections.Generic.IList{Pathfindax.PathfindEngine.IPathPostProcess})">
            <summary>
            Initialises a new <see cref="T:Pathfindax.PathfindEngine.PathRequestProcesser`1"/> with a <see cref="T:Pathfindax.Algorithms.IPathFindAlgorithm`1"/> and optional post processing steps.
            </summary>
            <param name="nodeGrids">The nodegrids that will be used to solve paths</param>
            <param name="pathFindAlgorithm">The algorithm that will be used to solve paths</param>
            <param name="pathPostProcesses">The post processing steps that will be applied after the <see cref="T:Pathfindax.Algorithms.IPathFindAlgorithm`1"/> found a path</param>
        </member>
        <member name="M:Pathfindax.PathfindEngine.PathRequestProcesser`1.Process(Pathfindax.PathfindEngine.PathRequest)">
            <summary>
            Solves a <see cref="T:Pathfindax.PathfindEngine.PathRequest"/>
            </summary>
            <param name="pathRequest"></param>
            <returns>A <see cref="T:Pathfindax.PathfindEngine.CompletedPath"/> object containing the solved path if succesfull/></returns>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.PathStart">
            <summary>
            The position of the start of the path
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.PathEnd">
            <summary>
            The position of the end of the path
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.Clearance">
            <summary>
            The amount of clearance needed
            </summary>
        </member>
        <member name="F:Pathfindax.PathfindEngine.PathRequest.Callback">
            <summary>
            The callback that will be called after the pathfinder finds a path or cannot find one.
            </summary>
        </member>
        <member name="T:Pathfindax.Primitives.PositionF">
            <summary>
            A simple struct to store a x and y coord.
            </summary>
        </member>
        <member name="T:Pathfindax.Threading.MultithreadedWorkerQueue`2">
            <summary>
            Queues items and processes them with one or multiple threads
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`2.#ctor(System.Collections.Generic.IList{Pathfindax.Threading.IProcesser{`0,`1}})">
            <summary>
            Initializes a new <see cref="T:Pathfindax.Threading.MultithreadedWorkerQueue`2"/>
            </summary>
            <param name="processers">A list with IProcessers that will do the actual work. The max amount of threads used it equal to the amount of <see cref="T:Pathfindax.Threading.IProcesser`2"/></param> in the list.
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`2.Start">
            <summary>
            Starts checking the queue for work to do
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`2.Stop">
            <summary>
            Stops checking the queue for work to do
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`2.Enqueue(`1)">
            <summary>
            Enqueues a new work item in the queue.
            </summary>
            <param name="workItem"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfindax.Threading.MultithreadedWorkerQueue`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Pathfindax.Threading.Worker`2">
            <summary>
            Class for doing work on a dedicated thread
            </summary>
            <typeparam name="TOut"></typeparam>
            <typeparam name="TIn"></typeparam>
        </member>
        <member name="P:Pathfindax.Threading.Worker`2.IsBusy">
            <summary>
            True if this <see cref="T:Pathfindax.Threading.Worker`2"/> is doing work.
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.Worker`2.#ctor(Pathfindax.Threading.IProcesser{`0,`1})">
            <summary>
            Creates a new worker that will start doing its work on a dedicated thread.
            </summary>
            <param name="processer"></param>
        </member>
        <member name="M:Pathfindax.Threading.Worker`2.Start">
            <summary>
            Starts the worker
            </summary>
        </member>
        <member name="M:Pathfindax.Threading.Worker`2.DoWork(`1,System.Action{`0})">
            <summary>
            Starts working on a work item on a dedicated thread
            </summary>
            <param name="taskCompletionSource">The work item</param>
            <param name="onCompleted"></param>
            <returns>True if the worker was not busy and the work was accepted</returns>
        </member>
        <member name="M:Pathfindax.Threading.Worker`2.Dispose">
            <inheritdoc />
        </member>
    </members>
</doc>
